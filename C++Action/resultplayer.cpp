//=============================================================================
// 
//  リザルトプレイヤー処理 [resultplayer.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "result.h"
#include "resultplayer.h"
#include "camera.h"
#include "manager.h"
#include "debugproc.h"
#include "renderer.h"
#include "input.h"
#include "motion.h"
#include "sound.h"
#include "particle.h"
#include "grassparticle.h"
#include "scene.h"
#include "wavemanager.h"
#include "calculation.h"

//==========================================================================
// マクロ定義
//==========================================================================

//==========================================================================
// 静的メンバ変数宣言
//==========================================================================

//==========================================================================
// コンストラクタ
//==========================================================================
CResultPlayer::CResultPlayer(int nPriority) : CPlayer(nPriority)
{
	// 値のクリア
	
}

//==========================================================================
// デストラクタ
//==========================================================================
CResultPlayer::~CResultPlayer()
{

}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CResultPlayer::Init(void)
{
	// 親の初期化処理
	CPlayer::Init();

	// ポーズのリセット
	m_pMotion->ResetPose(MOTION_DEFRESULT);

	return S_OK;
}

//==========================================================================
// モード別終了処理
//==========================================================================
void CResultPlayer::UninitByMode(void)
{

	// プレイヤー情報
	//CPlayer **ppPlayer = CResult::GetPlayer(0);
	CScene *pScene = CManager::GetScene();
	if (pScene != NULL)
	{
		CPlayer **ppPlayer = CManager::GetScene()->GetPlayer(0);

		// プレイヤーをNULL
		*ppPlayer = NULL;
	}
}

//==========================================================================
// 更新処理
//==========================================================================
void CResultPlayer::Update(void)
{
	// 死亡の判定
	if (IsDeath() == true)
	{// 死亡フラグが立っていたら
		return;
	}

	// 親の更新処理
	CPlayer::Collision();
	//CPlayer::Update();

	// 死亡の判定
	if (IsDeath() == true)
	{// 死亡フラグが立っていたら
		return;
	}

	// モーションの更新処理
	m_pMotion->Update();

	m_pMotion->Set(MOTION_DEFRESULT);

	// ステップごとの更新
	UpdateByStep();
}

//==========================================================================
// ステップごとの更新処理
//==========================================================================
void CResultPlayer::UpdateByStep(void)
{
	// ステップの設定
	//CResult::GetStep()->SetStep(CResultStep::STEPFRAG_SPEEDUP);
}


//==========================================================================
// 操作処理
//==========================================================================
void CResultPlayer::Controll(void)
{
	//**********************************
	// 当たり判定
	//**********************************
	Collision();
}